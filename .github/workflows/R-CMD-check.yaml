name: R-CMD-check

on:
  push:
    branches: [unit-test]
  pull_request:
    branches: [unit-test]

jobs:
  R-CMD-check:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write

    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      R_KEEP_PKG_SOURCE: true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up R
      uses: r-lib/actions/setup-r@v2
      with:
        r-version: release

    - name: Cache R packages
      uses: actions/cache@v4
      with:
        path: ${{ env.R_LIBS_USER }}
        key: ${{ runner.os }}-r-${{ hashFiles('**/*.R') }}-release
        restore-keys: |
          ${{ runner.os }}-r-release
          ${{ runner.os }}-r-

    - name: Install dependencies
      uses: r-lib/actions/setup-r-dependencies@v2
      with:
        extra-packages: |
          any::devtools
          any::testthat
          any::rcmdcheck
          any::stringr
          any::httr
          any::jsonlite

    - name: Document and install package
      run: |
        Rscript -e 'devtools::document()'
        R CMD INSTALL .

    - name: Run tests
      run: |
        Rscript -e '
          library(testthat)
          library(humind)
          options(testthat.output_file = "test-output.txt")
          testthat::set_max_fails(Inf)
          test_results <- testthat::test_dir("tests/testthat", reporter = testthat::ProgressReporter$new(show_praise = FALSE))
          writeLines(readLines("test-output.txt"))
          if (length(test_results) > 0) {
            writeLines("TESTS_FAILED=true", "failure-indicator.txt")
          } else {
            writeLines("TESTS_FAILED=false", "failure-indicator.txt")
          }
        '
      continue-on-error: true

    - name: Check if tests failed
      id: check_failure
      run: |
        if grep -q "TESTS_FAILED=true" failure-indicator.txt; then
          echo "Tests failed"
          echo "::set-output name=tests_failed::true"
        else
          echo "Tests passed"
          echo "::set-output name=tests_failed::false"
        fi

    - name: Create GitHub issues for failed and error tests
      if: steps.check_failure.outputs.tests_failed == 'true'
      run: |
        Rscript -e '
          library(jsonlite)
          library(httr)
          library(stringr)

          create_issue <- function(title, body) {
            existing_issues <- GET(
              url = "https://api.github.com/repos/impact-initiatives-hppu/humind/issues",
              add_headers(Authorization = paste("token", Sys.getenv("GITHUB_TOKEN")))
            )
            existing_titles <- sapply(content(existing_issues), function(x) x$title)
            
            if (!(title %in% existing_titles)) {
              issue_data <- toJSON(list(title = title, body = body), auto_unbox = TRUE)
              POST(
                url = "https://api.github.com/repos/impact-initiatives-hppu/humind/issues",
                add_headers(Authorization = paste("token", Sys.getenv("GITHUB_TOKEN"))),
                body = issue_data,
                encode = "json"
              )
            }
          }

          test_results <- readLines("test-output.txt")
          
          error_tests <- grep("^Error \\(", test_results, value = TRUE)
          for (test in error_tests) {
            test_name <- str_match(test, "Error \\((.+?)\\):")[2]
            error_message <- str_match(test, "Error \\(.+?\\): (.+)")[2]
            issue_title <- paste("Error in test:", test_name)
            issue_body <- paste("Error message:", error_message, "\n\nFull error details:\n", test)
            create_issue(issue_title, issue_body)
          }
          
          failure_tests <- grep("^Failure \\(", test_results, value = TRUE)
          for (test in failure_tests) {
            test_name <- str_match(test, "Failure \\((.+?)\\):")[2]
            failure_message <- str_match(test, "Failure \\(.+?\\): (.+)")[2]
            issue_title <- paste("Failure in test:", test_name)
            issue_body <- paste("Failure message:", failure_message, "\n\nFull failure details:\n", test)
            create_issue(issue_title, issue_body)
          }
        '
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
